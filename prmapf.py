import redis
import time
import json
import time
import os

from utils.state import State
from rich.console import Console
from rich.table import Table
from rich.columns import Columns
from rich.live import Live
from rich.panel import Panel
from rich.progress_bar import ProgressBar

console = Console()

r = redis.Redis(host=State.config['redis']['host'], port=State.config['redis']['port'], db=0)

def load_redis_data() -> list:
    keys = sorted([int(x) for x in r.keys()], reverse=True)
    return [json.loads(r.get(str(key))) for key in keys[:10]]

def load_data(filename) -> list:
    with open(filename, "r", encoding="utf-8") as datafile:
        data = json.load(datafile)
        sorted_data = sorted(data.items(), key=lambda x: x[1], reverse=True)
        return [f"{cnt: 5d} | {name}" for name, cnt in sorted_data[:10]]

def get_malware_table() -> Table:
    table = Table(show_header=True, header_style="bold bright_yellow")
    table.add_column("Nr", width=8)
    table.add_column("Sample")
    table.add_column("Progress", max_width=23)

    data = load_redis_data()
    for item in data:

        pgb = ProgressBar(total=item["total_progress"], completed=int(item["progress"]), width=10, complete_style="bright_yellow")

        if item.get('error'):
            caption = State.progress_cause
        elif item["progress"] > item["total_progress"]:
            caption = "Done"
        else: 
            caption = f"{item['progress']}/{item['total_progress']}"

        progress_panel = Columns([pgb, caption])
        table.add_row(
            str(item["task_id"]),
            item["sample_name"],
            progress_panel
        )
    return table

def get_stats_table() -> Table:
    # create empty json files if they don't exist
    if not os.path.exists(State.config['stats']['stats_dir'] + "joebox_stats.json"):
        with open(State.config['stats']['stats_dir'] + "joebox_stats.json", "w", encoding="utf-8") as datafile:
            json.dump({}, datafile)
    if not os.path.exists(State.config['stats']['stats_dir'] + "triage_stats.json"):
        with open(State.config['stats']['stats_dir'] + "triage_stats.json", "w", encoding="utf-8") as datafile:
            json.dump({}, datafile)

    jb_data = load_data(State.config['stats']['stats_dir'] + "joebox_stats.json")
    tr_data = load_data(State.config['stats']['stats_dir'] + "triage_stats.json")
    data = zip(jb_data, tr_data)
    table = Table(show_header=True, header_style="bold bright_yellow")
    table.add_column("Joebox-Stats")
    table.add_column("Triage-Stats")
    for item in data:
        table.add_row(*item)
    return table

def get_panel() -> Panel:
    return Panel.fit(Columns([get_stats_table(), get_malware_table()]), title="Malware Analysis Pipeline Framework", title_align="left")
    
with Live(get_panel(), refresh_per_second=1) as live:
    while True:
        time.sleep(1)
        live.update(get_panel())
        
