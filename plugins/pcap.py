import json
import os
import subprocess
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'PCAP'

class PCAP(AbstractPlugin):
    
    def __init__(self):
        super().__init__()


    def run(self, args):
        logging.info("Run PCAP Plugin")

        self.scan_path = str(State.path)
        self.suricata_path = State.config['suricata']['suricata_dir']
        sandboxes_to_scan = State.config['sandbox']['sandbox_list']
        self.suricata_config = State.config['suricata']['suricata_config']

        # Loop through the sandboxes and scan them
        sandboxes = sandboxes_to_scan.split(',')

        # Iterate over the items in the list and process each one
        for sandbox in sandboxes:
            sandbox = sandbox.strip()
            self.scan(sandbox)

            if os.path.getsize(f"{self.scan_path}/{sandbox}/suricata.json") > 0:
                with open(f"{self.scan_path}/{sandbox}/suricata.json", "r", encoding='utf-8') as f:
                    for line in f:
                        hits = json.loads(line)
                        logging.info(f"Suricata Hits for {sandbox}: {hits['alert']['signature']}")


    def scan(self, sandbox):
        # Suricata for network traffic
        suricata_pcap_path = f"{self.scan_path}/{sandbox}/suricata.pcap"
        suricata_output_path = f"{self.scan_path}/{sandbox}"
        suricata_output = subprocess.run(['suricata', '-c', self.suricata_config, '-l',suricata_output_path , '-r', suricata_pcap_path], stdout=subprocess.PIPE)
        
