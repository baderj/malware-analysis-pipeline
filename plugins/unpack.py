import argparse
import datetime
import json
import sys
import pathlib
import re
import os
import subprocess
import time
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'Unpack'

class Unpack(AbstractPlugin):

    def __init__(self):
        super().__init__()
        self.archive_list_7z = State.config['archives']['archive_list_7z'].split(',')
        self.archive_list_unrar = State.config['archives']['archive_list_unrar'].split(',')
        self.mimetype_list = State.config['mimetype_to_analyze']['mimetype_list'].split(',')
        self.todo_path = ''

    def run(self, args):
        logging.info("Run Unpack Plugin")
        self.todo_path = str(State.path)
        if not State.path:
            logging.info("No path to unpack a file")
            raise Exception("No path to unpack a file")

        for file in os.listdir(State.path):
            logging.info(f"Check file: {file}")
            archive_tool = self.check_archive(file)
            State.attachment_name = file
            if archive_tool == '7z' or archive_tool == 'unrar':
                self.unpack_archive(file, archive_tool)
                for file_mime in os.listdir(State.path):
                    if self.check_mimelist(self.todo_path, file_mime):
                        State.attachment_name = file_mime
                        logging.info(f"Found file to analyze: {file_mime}")
                        return
                break
            if self.check_mimelist(self.todo_path, file):
                State.attachment_name = file_mime
                logging.info(f"Found file to analyze: {file_mime}")
                return
        
        if archive_tool == False:
            #logging.info("No file to analyze found")
            raise Exception("No file to analyze found")    
        

    # Check if file is an executable
    def check_mimelist(self, todo_path, file):
        mime_type_check = subprocess.run(['file', '-b', '--mime-type', todo_path + '/' + file], stdout=subprocess.PIPE)
        for mime_type in self.mimetype_list:
            if mime_type_check.stdout.decode('utf-8') in self.mimetype_list:
                return True

    # Check if file is an archive        
    def check_archive(self, file):
        archive_file_mime = subprocess.run(['file', '-b', '--mime-type', self.todo_path + '/' + file], stdout=subprocess.PIPE)
        logging.info(f"Mime-Type of {file}: {archive_file_mime.stdout.decode('utf-8').strip()}")
        
        for archive_type in self.archive_list_7z:
            if archive_file_mime.stdout.decode('utf-8').strip() == archive_type:
                logging.info(f"7z archive found: {file}")
                return '7z'
        for archive_type in self.archive_list_unrar:
            if archive_file_mime.stdout.decode('utf-8').strip() == archive_type:
                logging.info(f"rar archive found: {file}")
                return 'unrar'
        
        logging.info(f"file is not an archive: {file}")
        return False
        
    def unpack_archive(self, file, archive_tool):
        if archive_tool == '7z':
            zip_file = subprocess.run(['7z', 'x', '-y', self.todo_path + '/' + file, '-o' + self.todo_path + '/'], stdout=subprocess.PIPE)
            logging.info(f"Decompressed archive (with 7z): {file}")
        elif archive_tool == 'unrar':
            unrar_file = subprocess.run(['unrar', 'e', '-y', self.todo_path  + '/' + file, self.todo_path + '/'], stdout=subprocess.PIPE)
            logging.info(f"Decompressed archive (with unrar): {file}")
        else:
            logging.info("No archive tool found to decompress: {file}")
            raise Exception("No archive tool found to decompress: {file}")