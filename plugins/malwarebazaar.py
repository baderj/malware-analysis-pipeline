import sys
import requests
import json
import os
import subprocess
import time
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'MalwareBazaar'

class MalwareBazaar(AbstractPlugin):
    
    def __init__(self, ):
        super().__init__()
        self.api_key = State.config['malwarebazaar']['api_key']
        self.url = State.config['malwarebazaar']['url']
        self.sandboxes_to_scan = State.config['sandbox']['sandbox_list']
        self.signature = []
    
    def run(self, args):
        logging.info("Run MalwareBazaar Plugin")

        self.todo_path = str(State.path)
        for file in os.listdir(State.path):
            if self.check_executable(file):
                if self.check_sandbox_signature():
                    self.upload(file)

    def check_executable(self, file):
        mime_type_executable = subprocess.run(['file', '--mime-type', self.todo_path + '/' + file], stdout=subprocess.PIPE)
        if 'application/x-dosexec' in mime_type_executable.stdout.decode('utf-8'):
            return True
        else:
            return False

    def check_sandbox_signature(self):
        # Loop through the sandboxes and check for malware signature
        sandboxes = self.sandboxes_to_scan.split(',')

        for sandbox in sandboxes:
            sandbox = sandbox.strip()
            signature_file = f"{self.todo_path}/{sandbox}/signature.json"
            if os.path.exists(signature_file):
                with open(signature_file, 'r') as f:
                    signature = json.load(f)
                    self.signature = f"{self.signature}{signature}"
        if self.signature:
            return True
        else:
            return False

    def upload(self, file):            
        headers = {
                  'API-KEY': State.config['malwarebazaar']['api_key']
                  }
        data = {
               'anonymous': 1,
               'delivery_method': 'email_attachment',
               'tags': self.signature,
               'references': {
                             'any_run': [
                                        ],
                             'joe_sandbox': [
                                        ],
                             'malpedia': [
                                         ],
                             'twitter': [
                                        ],
                             'links': [
                                      ],
                             },
               'context': {
                          'dropped_by_md5': [
                                            ],
                          'dropped_by_sha256': [
                                               ],
                          'dropped_by_malware': [
                                                ],
                          }
               }
        file_path = f"{self.todo_path}/{file}"
        files = {
                'json_data': (None, json.dumps(data), 'application/json'),
                'file': (open(file_path,'rb'))
                }
        
        requests.post(self.url, files=files, verify=True, headers=headers)
        logging.info(f"Uploaded {file} to MalwareBazaar")