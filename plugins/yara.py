import subprocess
import os
import json
import logging
import time

from plugins.abstract_plugin import AbstractPlugin
from collections import OrderedDict
from utils.state import State
from pathlib import Path

class_name = 'Yara'

class Yara(AbstractPlugin):

    def __init__(self):
        super().__init__()
        self.data = {}

    def run(self, args):
        logging.info("Run YARA Plugin")

        self.scan_path = str(State.path)
        self.yara_path = State.config['yara']['rules_dir']
        sandboxes_to_scan = State.config['sandbox']['sandbox_list']

        # Loop through the sandboxes and scan them
        sandboxes = sandboxes_to_scan.split(',')

        # Iterate over the items in the list and process each one
        for sandbox in sandboxes:
            sandbox = sandbox.strip()
            self.scan(sandbox)
        
            # if yara.json exists, read it
            if Path(f"{self.scan_path}/{sandbox}/yara.json").is_file():
                with open(f"{self.scan_path}/{sandbox}/yara.json", 'r') as f:
                    data = json.load(f)
                    logging.info(f"YARA Hits for {sandbox}: {data}")
        
    def scan(self, sandbox):
        # Scan the directory for yara rules
        yara_output_path_txt = f"{self.scan_path}/{sandbox}/yara.txt"
        yara_output_path_json = f"{self.scan_path}/{sandbox}/yara.json"
        yara_memory_path = f"{self.scan_path}/{sandbox}/memory/"
        yara_files_path = f"{self.scan_path}/{sandbox}/files/"
        if not os.path.exists(yara_memory_path):
            os.makedirs(yara_memory_path)
        if not os.path.exists(yara_files_path):
            os.makedirs(yara_files_path)

        for file in os.listdir(self.yara_path):
            with open(yara_output_path_txt, 'a') as f:
                yara_output = subprocess.run(['yara', '-w', '-r', self.yara_path + file, yara_memory_path], stdout=f)
                if yara_output.returncode != 0:
                    logging.info(f"YARA Memory Hit: {yara_output}")
        
        for file in os.listdir(self.yara_path):
            with open(yara_output_path_txt, 'a') as f:
                yara_output = subprocess.run(['yara', '-w', '-r', self.yara_path + file, yara_files_path], stdout=f)
                if yara_output.returncode != 0:
                    logging.info(f"YARA Dropped Files Hit: {yara_output}")

        with open(yara_output_path_txt, 'r') as f:
        # Read the lines of the file
            lines = f.readlines()

        # Write the signatures to a JSON file
        for line in lines:
            signature = line.split()[0]
            self.data[signature] = self.data.get(signature, 0) + 1
        with open(yara_output_path_json, 'w') as f:
            json.dump(self.data, f)

        self.data = {}

        # Remove the tmp txt file
        os.remove(yara_output_path_txt)